<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/security"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:beans="http://www.springframework.org/schema/beans"
	xsi:schemaLocation="
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
		http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security-3.1.xsd">

    <beans:bean id="cryptograph" class="library.security.CryptographDES">
        <beans:property name="random" value="_secret-Page-Key_$" />
    </beans:bean>
    <!-- backend part -->
    <http authentication-manager-ref="backend" pattern="/backend/**" auto-config="true">
        <intercept-url pattern="/backend/login" access="ROLE_ANONYMOUS" />
        <!--<intercept-url pattern="/backend/*" access="ROLE_ADMIN,ROLE_MODERATOR" />-->
        <form-login login-page="/backend/login" default-target-url="/backend/dashboard" 
        authentication-failure-url="/backend/login?error=true" password-parameter="password" 
        username-parameter="login" />
        <!-- danger potentiel : si le mécanisme est basé sur la même table, il se peut que 
             l'administrateur soit connecté en tant qu'un utilisateur sur frontoffice et
             inversement -->
        <logout logout-url="/backend/logout" logout-success-url="/backend/login" invalidate-session="true" delete-cookies="JSESSIONID" />
        <session-management invalid-session-url="/backend/login" session-fixation-protection="newSession">
            <concurrency-control max-sessions="1" error-if-maximum-exceeded="true" />
        </session-management>
        <access-denied-handler error-page="/backend/access-denied"/>
    </http>    
    <authentication-manager id="backend">
        <authentication-provider user-service-ref="adminDetailsServiceImpl">
            <password-encoder ref="passwordEncoder">
                <salt-source ref="saltCellar" />
            </password-encoder>
        </authentication-provider>
    </authentication-manager>
    <!-- frontend part -->
    <http authentication-manager-ref="frontend" auto-config="true" use-expressions="true">
        <!--<custom-filter position="CONCURRENT_SESSION_FILTER" ref="concurrencyFilter" />-->
        <!--<intercept-url pattern="/register*" access="ROLE_ANONYMOUS" />-->
        <!--<intercept-url pattern="/login" access="ROLE_ANONYMOUS" />-->
        <intercept-url pattern="/logout" access="ROLE_USER" />
        <!--<intercept-url pattern="/account/*" access="ROLE_USER" />-->
        <form-login login-page="/login" default-target-url="/account/modify-password" 
        authentication-failure-url="/login?error=true" password-parameter="password" 
        username-parameter="login" />
        <remember-me user-service-ref="userDetailsServiceImpl" data-source-ref="dataSource" key="remMeK_00@"  />
        <!--<remember-me services-ref="rememberMeServices" />-->
        <!-- fonctionnel : <remember-me key="remMeK_00@" />-->
        <session-management invalid-session-url="/" session-fixation-protection="newSession">
            <concurrency-control max-sessions="1" error-if-maximum-exceeded="true" />
        </session-management><!-- cela invalidera de nouvelles connexions de l'utilisateur : il faut rajouter org.springframework.security.web.session.HttpSessionEventPublisher dans web.xml : un utilisateur pourra toujours avoir une seule session ouverte. L'ouverture d'une nouvelle session provoquera la fermeture de la précédente 
Si l'on veut que chaque nouvelle connexion provoque une erreur, il faut rajouter l'attribut error-if-maximum-exceeded="true" à la balise concurrency-control.
L'attribut session-fixation-protection protège contre les attaques du Session fixation.
Cela concerne l'ouverture de nouvelles sessions (= nouvelles connexion du même utilisateur, donc par exemple une connexion sur Firefox, une autre sur IE, une troisième sur Chrome - seule celle du Firefox sera validée, les autres léveront une exception)
		-->
<!-- Si l'on veut surcharger les filtres (CHANNEL_FILTER,  LOGOUT_FILTER...), on peut le spécifier dans <http /> : <custom-filter position="FORM_LOGIN_FILTER" ref="myFilter" /> --> 
        <!-- <global-method-security secured-annotations="enabled" />cela permet de gérer la sécurité via les annotations dans le code -->
        <logout logout-url="/logout" logout-success-url="/login" invalidate-session="true" delete-cookies="JSESSIONID" /><!-- à la déconnexion, le cookie avec JSESSIONID sera supprimé -->
        <access-denied-handler error-page="/access-denied"/>
    </http>
    
    <authentication-manager id="frontend">
        <authentication-provider user-service-ref="userDetailsServiceImpl">
            <password-encoder ref="passwordEncoder">
                <salt-source ref="saltCellar" /> <!-- user-property="username" : propriété username sera utilisée pour saler le mot de passe -->
            </password-encoder>
            <!-- in-memory authentication <user-service id="userDetailsService">
                <user name="bartosz" password="aa4e0bd35c562885f21ad74b171c23cfc4370e31" authorities="ROLE_USER, ROLE_ADMIN" />
                <user name="kamil" password="ab239c5a26a103f02214f1ae199f6dad0108e000" authorities="ROLE_USER" />
            </user-service>-->
        </authentication-provider>
    </authentication-manager>
<!--    <global-method-security pre-post-annotations="enabled" jsr250-annotations="enabled">
    </global-method-security>-->
<!--
    <beans:bean id="concurrencyFilter" class="org.springframework.security.web.session.ConcurrentSessionFilter">
        <beans:property name="sessionRegistry" ref="sessionRegistry" />
        <beans:property name="expiredUrl" value="/session-expired" />
    </beans:bean>

    <beans:bean id="sas" class="org.springframework.security.web.authentication.session.ConcurrentSessionControlStrategy">
        <beans:constructor-arg name="sessionRegistry" ref="sessionRegistry" />
        <beans:property name="maximumSessions" value="1" />
    </beans:bean>

    <beans:bean id="sessionRegistry" class="org.springframework.security.core.session.SessionRegistryImpl" />
-->

<!--
<beans:bean id="rememberMeServices" class="org.springframework.security.web.authentication.rememberme.PersistentTokenBasedRememberMeServices">
    <beans:property name="key" value="un83__$|dfoks" />
    <beans:property name="tokenValiditySeconds" value="1209600" />
    <beans:property name="userDetailsService" ref="userDetailsServiceImpl"/>
    <beans:property name="tokenRepository" ref="jdbcTokenRepository"/>
</beans:bean>
<beans:bean id="jdbcTokenRepository" 
class="org.springframework.security.web.authentication.rememberme.JdbcTokenRepositoryImpl">
    <beans:property name="dataSource" ref="dataSource"/>
</beans:bean>
-->
    <beans:bean class="org.springframework.security.authentication.encoding.ShaPasswordEncoder" id="passwordEncoder"/>
    
    <beans:bean id="saltCellar" class="library.security.SaltCellar">
        <beans:property name="saltData">    
            <beans:map>
                <beans:entry key="a" value="04R9)_" />
                <beans:entry key="b" value="dojdfs837amp^" />
                <beans:entry key="c" value=")_'_'ysw" />
                <beans:entry key="d" value="fodsamp^_8" />
                <beans:entry key="e" value="%qsdqdsq*" />
                <beans:entry key="f" value="(\sdqn" />
                <beans:entry key="g" value="dfs281" />
                <beans:entry key="h" value="@sldqz123" />
                <beans:entry key="i" value="EZ8Ncxwcxw__" />
                <beans:entry key="j" value="_82JBXC" />
                <beans:entry key="k" value="_8\KSFKKD|" />
                <beans:entry key="l" value="coxwk,,vc.....S" />
                <beans:entry key="m" value="sqkjfdus271" />
                <beans:entry key="n" value="D9QSDNJXC" />
                <beans:entry key="o" value="93R?BA1CXW%" />
                <beans:entry key="p" value="sdq$scxjierj£" />
                <beans:entry key="r" value="sQSqdaamp^111DSQS**xcwcwxc" />
                <beans:entry key="s" value="(mpPP^vcoxne" />
                <beans:entry key="t" value="osdfsdf914Y7x///" />
                <beans:entry key="u" value="../,sdubvcx" />
                <beans:entry key="v" value="dfjifnj_" />
                <beans:entry key="w" value="orutegnb1450)" />
                <beans:entry key="x" value="vvcnxuezr66661CWXCXC" />
                <beans:entry key="y" value="D..SD.CXWXCOW" />
                <beans:entry key="z" value="38583NXCNW^$sqsdsqnchu" />
                <beans:entry key="0" value="({nkvcxer" />
                <beans:entry key="1" value="d%dfsdfidsjv" />
                <beans:entry key="2" value="orczjdfvnb£" />
                <beans:entry key="3" value="dfoisivn" />
                <beans:entry key="4" value="vcbezazeze" />
                <beans:entry key="5" value=")qednfv" />
                <beans:entry key="6" value="cxjisivjsf111" />
                <beans:entry key="7" value="dosovcxcvxcv" />
                <beans:entry key="8" value="v,xcjie" />
                <beans:entry key="9" value="!sdfjibnv" />
                <beans:entry key="." value="?scidvjfbfdsgfbp^p" />
                <beans:entry key="_" value="!amp^!!fdsf?!?!**cxwdfiezrçezr,nv" />
                <beans:entry key="-" value="dsqosdq@dnvcmpsd%*" />
            </beans:map>
        </beans:property>    
    </beans:bean>

  <!-- http://static.springsource.org/spring-security/site/docs/3.0.x/apidocs/org/springframework/security/access/hierarchicalroles/RoleHierarchyImpl.html -->
<beans:bean id="roleHierarchy"  class="org.springframework.security.access.hierarchicalroles.RoleHierarchyImpl">
     <beans:property name="hierarchy">
         <beans:value>
             ROLE_ADMIN > ROLE_MODERATOR
         </beans:value>
     </beans:property>
</beans:bean>

    <beans:bean id="XSSCleaner" name="XSSCleaner" class="library.security.XSSCleaner">
        <beans:property name="acceptedTags">
            <beans:list>
                <beans:value>b</beans:value>
                <beans:value>img</beans:value>
                <beans:value>i</beans:value>
                <beans:value>em</beans:value>
                <beans:value>strong</beans:value>
            </beans:list>
        </beans:property>
    </beans:bean>

    <beans:bean id="CSRFProtector" name="CSRFProtector" class="library.security.CSRFProtector">
        <beans:property name="expirationTime"><beans:value type="long">1800000</beans:value></beans:property><!-- session salt validity : 1800000 miliseconds = 30 minutes -->
        <beans:property name="hashStart" value="9F.fdsoN33!!!" />
        <beans:property name="hashEnd" value="Nofds$POE*dso.e" />
        <beans:property name="passwordEncoder" ref="passwordEncoder" />
    </beans:bean>
<!--<beans:bean id="userDetailsService" class="library.security.AuthenticationUserDetails">-->

<!-- comment faire pour sauvegarder le mot de passe salé : 
http://stackoverflow.com/questions/8067564/spring-security-salt
-->
<!--
AuthenticationManager est une interface.
L'implémentation par défaut AuthenticationManager est ProviderManager. Il intercepte la requête d'authentification et la délegue vers la liste des AuthenticationProviders. Chacun parmi eux peut capter une exception ou l'objet Authentication. S'il est retourné, il est automatiquement mise dans SecurityContext.
Par défaut ProviderManager va écraser toutes les informations sensibles pouvant être placées dans l'objet Authentication (comme mot de passe par exemple). 
-->    
    <!--<beans:bean id="authenticationManager" class="org.springframework.security.authentication.ProviderManager">
        <beans:property name="providers">
            <beans:list>
                <beans:ref local="daoAuthenticationProvider"/>
                <beans:ref local="anonymousAuthenticationProvider"/>
            </beans:list>
        </beans:property>
    </beans:bean>-->
    
<!--
DaoAuthenticationProvider est le plus simple AuthenticationProvider dans Spring. 
PasswordEncoder est un élément facultatif.
-->
   <!-- <beans:bean id="daoAuthenticationProvider" class="org.springframework.security.authentication.dao.DaoAuthenticationProvider">
        <beans:property name="userDetailsService" ref="inMemoryDaoImpl"/>
        <beans:property name="passwordEncoder" ref="passwordEncoder"/>
    </beans:bean>    
    
    
   <beans:bean id="anonymousAuthenticationProvider" class="org.springframework.security.authentication.AnonymousAuthenticationProvider">
        <beans:property name="key" value="k" />
    </beans:bean>-->
    
<!--  http://static.springsource.org/spring-security/site/docs/3.1.x/reference/springsecurity-single.html  
    Comment faire : 
    in-memory authentication dans un premier temps 
    page de connexion
    page de déconnexion
    tester l'accès à une page réservée à des utilisateurs connectés
    tester l'accès selon des rôles (ROLE_USER et ROLE_ADMIN)
    rajouter remember-me
    saler le mot de passe à l'enregistrement et à la connexion
    - récupérer l'instance de l'utilisateur connecté pour la gestion des formulaires de son compte
    connexion depuis la base de données
    tester la connexion au backoffice et au frontoffice séparémment (2 URLs différents)
    rajouter remember-me avec la spécification et les informations contenues dans la base http://jaspan.com/improved_persistent_login_cookie_best_practice (partie 11.3 de la doc) ou
http://static.springsource.org/spring-security/site/docs/3.0.x/reference/remember-me.html (parie 10.4)
    bloquer la connexion d'un seul utilisateur (un seul login) plusieurs fois à l'application (pour l'instant cela ne fonctionne pas)
    réserver l'accès à certaines ressources uniquement pour certains utilisateurs (seuls les anonymes peuvent accéder à la page de connexion et non pas authentifiés)
    appliquer la hiérarchie des rôles (partie 14.4) pour les rôles du backoffice (administrateur est l'extension du modérateur avec plus de droits)
    appliquer ACL (partie 17) : fait avec SpringEL pour l'accès à des ressources propres à un utilisateur
    appliquer ACL pour le backoffice (avec bitmask d'accès - non, avec SUBSCRIBER_ADD etc.)
    403 Access is denied : la page apparaît quand un utilisateur connecté n'a pas droit d'accéder à une page
    au lieu de capter AccessDeniedException, afficher une page d'erreur.
    -->
<!--
ACL : 	
http://grzegorzborkowski.blogspot.com/2008/10/spring-security-acl-very-basic-tutorial.html
http://refcardz.dzone.com/refcardz/expression-based-authorization
http://krams915.blogspot.com/2011/01/spring-security-3-full-acl-tutorial_1042.html
http://java.dzone.com/tips/configure-domain-object
http://stackoverflow.com/questions/1920959/group-and-acl-on-spring-security
http://stackoverflow.com/questions/7481869/spring-security-how-acl-grants-permissions
http://grzegorzborkowski.blogspot.com/2008/10/spring-security-acl-very-basic-tutorial.html
http://static.springsource.org/spring-security/site/docs/3.0.x/apidocs/org/springframework/security/core/userdetails/User.html
http://static.springsource.org/spring-security/site/docs/3.1.x/reference/springsecurity-single.html#dbschema-acl
http://blog.springsource.com/2009/01/02/spring-security-customization-part-2-adjusting-secured-session-in-real-time/
http://stackoverflow.com/questions/11715381/how-to-disable-spring-security-logging
http://stackoverflow.com/questions/3087548/can-spring-security-use-preauthorize-on-spring-controllers-methods
http://stackoverflow.com/questions/5022504/spring-security-method-is-not-secured-with-preauthorize-annotation
http://stackoverflow.com/questions/3785706/whats-the-difference-between-secured-and-preauthorize-in-spring-security-3
http://stackoverflow.com/questions/8430631/spring-security-standard-table-fields-vs-hibernate-required-fields
http://en.tekstenuitleg.net/blog/spring-security-with-roles-and-rights
http://forum.springsource.org/showthread.php?98900-Spring-Security-basic-ACL-implementation
http://forum.springsource.org/showthread.php?88285-Spring-Security-ACLs-with-ROO
http://forum.springsource.org/showthread.php?65726-ACL-database-schema-creation
http://mprabhat.wordpress.com/2012/07/18/357/
http://springinpractice.com/2010/07/06/spring-security-database-schemas-for-mysql/
http://stackoverflow.com/questions/3785706/whats-the-difference-between-secured-and-preauthorize-in-spring-security-3
http://static.springsource.org/spring-security/site/docs/3.1.x/reference/el-access.html
http://static.springsource.org/spring-security/site/docs/3.1.x/reference/el-access.html#el-permission-evaluator
http://blog.solidcraft.eu/2011/03/spring-security-by-example-securing.html
http://stsmedia.net/spring-finance-part-6-spring-security-3-integration/
http://www.developpez.net/forums/d1100317/java/general-java/spring/spring-web/probleme-preauthorize/
http://java.dzone.com/articles/writing-your-spring-security


-->
<!--
	<http>
		<form-login login-page="/users/login" login-processing-url="/users/login/authenticate" default-target-url="/hotels" authentication-failure-url="/users/login?login_error=1"/>
		<logout logout-url="/users/logout" logout-success-url="/users/logoutSuccess"/>
	</http>-->

	<!--
		Define local authentication provider, a real app would use an external provider (JDBC, LDAP, CAS, etc)
		
		usernames/passwords are:
			keith/melbourne
			erwin/leuven
			jeremy/atlanta
			scott/rochester
	-->
	<!--
	<authentication-manager>
		<authentication-provider>
			<password-encoder hash="md5" />
			<user-service>
				<user name="keith" password="417c7382b16c395bc25b5da1398cf076" authorities="ROLE_USER, ROLE_SUPERVISOR" />
				<user name="erwin" password="12430911a8af075c6f41c6976af22b09" authorities="ROLE_USER, ROLE_SUPERVISOR" />
				<user name="jeremy" password="57c6cbff0d421449be820763f03139eb" authorities="ROLE_USER" />
				<user name="scott" password="942f2339bf50796de535a384f0d1af3e" authorities="ROLE_USER" />
			</user-service>
		</authentication-provider>
	</authentication-manager>
-->
</beans:beans>