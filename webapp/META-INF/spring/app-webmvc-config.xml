<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<beans xmlns="http://www.springframework.org/schema/beans" 
       xmlns:context="http://www.springframework.org/schema/context" 
       xmlns:mvc="http://www.springframework.org/schema/mvc" 
       xmlns:p="http://www.springframework.org/schema/p" 
       xmlns:security="http://www.springframework.org/schema/security"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
       xmlns:task="http://www.springframework.org/schema/task"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.1.xsd     
       http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.1.xsd     
       http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-3.1.xsd
       http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security-3.1.xsd
    http://www.springframework.org/schema/task
    http://www.springframework.org/schema/task/spring-task-3.0.xsd">
	
    <!--<task:scheduler id="taskScheduler"/>
    <task:executor id="taskExecutor" pool-size="1"/>
    <task:annotation-driven executor="taskExecutor" scheduler="taskScheduler"/>-->
    

	<!-- Turns on support for mapping requests to Spring MVC @Controller methods
	     Also registers default Formatters and Validators for use across all @Controllers -->
	<mvc:annotation-driven validator="validator" conversion-service="conversionService">
        <mvc:argument-resolvers>
            <bean class="library.resolver.UserDetailsResolver" />
            <bean class="library.resolver.LocaleLangResolver" />
        </mvc:argument-resolvers>
        <mvc:message-converters>
            <bean class="org.springframework.http.converter.json.MappingJacksonHttpMessageConverter"/>
        </mvc:message-converters>
    </mvc:annotation-driven>
    <!-- The controllers are autodetected POJOs labeled with the @Controller annotation. -->
    <context:component-scan base-package="library.controller"/>

    <security:global-method-security pre-post-annotations="enabled" jsr250-annotations="enabled">
    </security:global-method-security>
	<!-- Handles HTTP GET requests for /resources/** by efficiently serving up static resources -->
	<!--<mvc:resources location="/, classpath:/META-INF/web-resources/" mapping="/resources/**"/>-->
	<mvc:resources mapping="/public/**" location="/public/"/> 
    <!-- Allows for mapping the DispatcherServlet to "/" by forwarding static resource requests to the container's default Servlet -->
    <!--<mvc:default-servlet-handler/>    -->
    
	<!-- register "global" interceptor beans to apply to all registered HandlerMappings -->
	<mvc:interceptors>
		<!--<bean class="org.springframework.web.servlet.theme.ThemeChangeInterceptor"/>-->
		<bean class="org.springframework.web.servlet.i18n.LocaleChangeInterceptor" p:paramName="language"/>
	</mvc:interceptors>
	
	<!-- selects a static view for rendering without the need for an explicit controller
	<mvc:view-controller path="/" view-name="home"/>
	<mvc:view-controller path="/uncaughtException"/>
	<mvc:view-controller path="/resourceNotFound"/>
	<mvc:view-controller path="/dataAccessFailure"/> -->
 

  <bean id="validator" class="org.springframework.validation.beanvalidation.LocalValidatorFactoryBean">
        <property name="validationMessageSource" ref="messageSource"/>
  </bean> <!-- Configure JSR-303 validation --> 
   <!-- maxUploadSize n'est pas bon dans la situation où l'on voudrait plusieurs tailles de fichier en fonction du formulaire (par exemple : 100 kb pour le formulaire avec l'avatar, 500 kb pour une galerie de photos etc.)-->
    <bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
        <!-- one of the properties available; the maximum file size in bytes -->
        <property name="maxUploadSize" value="100000"/>
        <property name="maxInMemorySize" value="100000"/>
        <property name="defaultEncoding" value="utf-8"/>
        <!-- found here http://stackoverflow.com/questions/9055025/how-to-change-the-character-encoding-for-servlet-3-0-spring-mvc-multipart-upload -->
    </bean>
    <!-- Fait pour régler le problème DEBUG: org.springframework.web.servlet.handler.SimpleMappingExceptionResolver - Resolving to view 'sessionError' for exception of type [org.springframework.web.multipart.MaxUploadSizeExceededExcept
ion], based on exception mapping [org.springframework.web.multipart.MultipartException]
DEBUG: org.springframework.web.servlet.handler.SimpleMappingExceptionResolver - Exposing Exception as model attribute 'exception'
DEBUG: org.springframework.web.servlet.DispatcherServlet - Handler execution resulted in exception - forwarding to resolved error view: ModelAndView: reference to view with name 'sessionError'; mod
el is {exception=org.springframework.web.multipart.MaxUploadSizeExceededException: Maximum upload size of 100000 bytes exceeded; nested exception is org.apache.commons.fileupload.FileUploadBase$Siz
eLimitExceededException: the request was rejected because its size (153976) exceeds the configured maximum (100000)}
org.springframework.web.multipart.MaxUploadSizeExceededException: Maximum upload size of 100000 bytes exceeded; nested exception is org.apache.commons.fileupload.FileUploadBase$SizeLimitExceededExc
eption: the request was rejected because its size (153976) exceeds the configured maximum (100000)
        at org.springframework.web.multipart.commons.CommonsMultipartResolver.parseRequest(CommonsMultipartResolver.java:160)
        at org.springframework.web.multipart.commons.CommonsMultipartResolver.resolveMultipart(CommonsMultipartResolver.java:139)
        at org.springframework.web.servlet.DispatcherServlet.checkMultipart(DispatcherServlet.java:1020)
        at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:883)
        at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:852)
        at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:882)
        at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:789)
        at javax.servlet.http.HttpServlet.service(HttpServlet.java:158)
        at javax.servlet.http.HttpServlet.service(HttpServlet.java:96)
        at com.caucho.server.dispatch.ServletFilterChain.doFilter(ServletFilterChain.java:109)
        at org.springframework.orm.jpa.support.OpenEntityManagerInViewFilter.doFilterInternal(OpenEntityManagerInViewFilter.java:147)
        at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:76)
        at com.caucho.server.dispatch.FilterFilterChain.doFilter(FilterFilterChain.java:89)
        at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:330)
        at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:118)
        at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:84)
        at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:342)
        at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:113)
        at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:342)
        at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:103)
        at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:342)
    Mais pas une bonne solution si l'on a des formulaires contenant plus de champ que seulement celui pour transférer le fichier -->
    <bean class="org.springframework.web.servlet.handler.SimpleMappingExceptionResolver">
	    <property name="exceptionMappings">
	        <props>
	            <prop key="org.springframework.web.multipart.MultipartException">sessionExpired</prop>
	        </props>
	    </property>
	</bean>


	<!--<bean id="localeChangeInterceptor"
		class="org.springframework.web.servlet.i18n.LocaleChangeInterceptor">
		<property name="paramName" value="language" />
	</bean>
	<bean class="org.springframework.web.servlet.mvc.support.ControllerClassNameHandlerMapping" >
		<property name="interceptors">
		   <list>
			<ref bean="localeChangeInterceptor" />
		   </list>
		</property>
	</bean>-->
	<!-- resolves localized <theme_name>.properties files in the classpath to allow for theme support 
	<bean class="org.springframework.ui.context.support.ResourceBundleThemeSource" id="themeSource"/>-->
	
	<!-- store preferred theme configuration in a cookie
	<bean class="org.springframework.web.servlet.theme.CookieThemeResolver" id="themeResolver" p:cookieName="theme" p:defaultThemeName="standard"/> -->

	<!-- This bean resolves specific types of exceptions to corresponding logical - view names for error views. 
	     The default behaviour of DispatcherServlet - is to propagate all exceptions to the servlet container: 
	     this will happen - here with all other types of exceptions. 
	<bean class="org.springframework.web.servlet.handler.SimpleMappingExceptionResolver" p:defaultErrorView="uncaughtException">
		<property name="exceptionMappings">
			<props>
				<prop key=".DataAccessException">dataAccessFailure</prop>
				<prop key=".NoSuchRequestHandlingMethodException">resourceNotFound</prop>
				<prop key=".TypeMismatchException">resourceNotFound</prop>
				<prop key=".MissingServletRequestParameterException">resourceNotFound</prop>
			</props>
		</property>
	</bean>-->
	
	<!-- Enable file upload functionality
	<bean class="org.springframework.web.multipart.support.StandardServletMultipartResolver" id="multipartResolver"/> -->
    
    <!-- Tiles Configuration
    <bean class="org.springframework.web.servlet.view.UrlBasedViewResolver" id="tilesViewResolver">
        <property name="viewClass" value="org.springframework.web.servlet.view.tiles2.TilesView"/>
    </bean>
    
    <bean class="org.springframework.web.servlet.view.tiles2.TilesConfigurer" id="tilesConfigurer">
        <property name="definitions">
            <list>
                <value>/WEB-INF/layouts/layouts.xml</value>
 
                <value>/WEB-INF/views/**/views.xml</value>
            </list>
        </property>
    </bean> -->
	<!--<bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<property name="prefix" value="/WEB-INF/views/" />
		<property name="suffix" value=".jsp" />
	</bean>-->

	<!--<bean id="viewResolver" class="org.springframework.web.servlet.view.ResourceBundleViewResolver" p:basename="views" />
    <bean class="org.springframework.web.servlet.view.ResourceBundleViewResolver" id="viewResolver">
        <property name="basename" value="views"/>
    </bean>--> 

<!--<bean class="org.springframework.web.servlet.view.ContentNegotiatingViewResolver">
  <property name="mediaTypes">
    <map>
      <entry key="html" value="text/html"/>
      <entry key="json" value="application/json"/>
    </map>
  </property>
  <property name="defaultViews">
    <list>
      <bean class="org.springframework.web.servlet.view.json.MappingJacksonJsonView">
        <property name="prefixJson" value="true"/>
      </bean>
    </list>
  </property>
</bean>-->
 
    <!--<bean id="servletContext" class="org.springframework.web.context.support.ServletContextFactoryBean" />-->
</beans>
